Для выполнения задания, проделаем следующие шаги:

1. Создадим внешний репозиторий на GitHub с названием HW_GIT_2
2. Далее можно пойти двумя путями:
 2.1 Клонировать внешний репозиторий на локальный компьютер через команду
     git clone url
 2.2 Превратить локальный каталог, который еще не находится под версионным контролем, в репозиторий Git 
     git init

     Я выбрал путь 2.2 , поэтому проделал такие шаги:

3. Создал в текущем каталоге файл README.md и внес в него название репозитория
   echo "my HW_GIT_2" > README.md

4. Инициализировал пустой репозиторий Git на локальном компьютере:
   git init

5. Закоммитил файл README.md
    git add README.md
или git add .
    git commit -m "first commit"

6. Переименовываем текущую ветку master в main. Некоторое время назад GitHub изменил имя главной ветки c master на main для всех вновь созданных репозиториев. А вот сам git до сих пор при инициализации репозитория создаёт ветку master. 
   Поэтому, чтобы первый раз запушить локальный репозиторий в пустой репозиторий на GitHub ветку нужно переименовать, иначе возникнет ошибка
   git branch -M main

7. Подключаем локальный репозиторий к удаленному репозиторию на GitHub
   git remote add origin https://github.com/Montana404/HW_GIT_2.git

8. Отправляем изменения на удаленный сервер
   git push -u origin main


ДОМАШНЕЕ ЗАДАНИЕ №2

1. На локальном репозитории сделать ветки для:
 - Postman
 - Jmeter
 - CheckLists
 - Bug Reports
 - SQL
 - Charles
 - Mobile testing

   git branch postman ; git branch jmeter ; git branch cheklists ; git branch bug_reports ; git branch sql ; git branch charles ; git branch mobile_testing

2. Запушить все ветки на внешний репозиторий
   git push origin --all

3. В ветке Bag Reports сделать текстовый документ со структурой баг репорта
   git checkout bug_reports
   cat > bug_report.txt
   vim bug_report.txt
   i -> Esc -> :wq -> Entr

Bug_id:номер дефекта
Project: проект
Build: версия билда
Environment: окружение (десктоп/мобилка, операционная система, приложение) 
Summary: описание дефекта - что, где, когда случилось
Steps to reproduce: шаги воспроизведения
Actual results: фактический результат
Expected result: ожидаемый результат
Attachment: фото/видео с багом
Severity: атрибут, характеризующий влияние дефекта на работоспособность приложения (5 градаций)
Priority: атрибут, характеризующий очередность устранения бага. Чем выше приоритет, тем быстрее нужно устранить дефект.
Author: кто обнаружил
Assignee: кто назначен ответственным за устранение

4. Запушить структуру багрепорта на внешний репозиторий
    git add .
    git commit -m "add bug_report.txt"
    git push --set-upstream origin bug_reports
или git push -u origin bug_reports

5. Вмержить ветку Bug Reports в Main
   git checkout main
   git merge bug_reports

6. Запушить main на внешний репозиторий.
   git add .
   git commit -m "merge bug_reports to main"
   git push

7. В ветке CheckLists набросать структуру чек листа.
   git checkout cheklists
   cat > checklist.txt
   vim checklist.txt
   i -> Esc -> :wq -> Entr
 
Структура чек-листа
1. Версия сборки (что мы тестируем?)
2. Окружение (девайс, ОС, браузер)
3. Список проверок
4. Статус проверок
5. Результаты тестирования
6. Тестировщик (кто тестировал)

8. Запушить структуру на внешний репозиторий
   git add checklist.txt
   git commit -m "add checklist.txt"
   git push -u origin cheklists

9. На внешнем репозитории сделать Pull Request ветки CheckLists в main
   new pull requests
   Merge pull request
   Confirm merge

10. Синхронизировать Внешнюю и Локальную ветки Main
    git pull
