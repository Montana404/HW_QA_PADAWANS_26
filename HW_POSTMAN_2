{
	"info": {
		"_postman_id": "de7ee82a-6a2e-499a-8a32-292fe4e39807",
		"name": "HW_POSTMAN_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json\r",
							"  var jsonData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							" pm.test(\"Check name Montana\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(\"Montana\");\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test(\"Check age 37\", function () {\r",
							"   pm.expect(jsonData.age).to.eql(\"37\");\r",
							"})\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test(\"Check salary\", function () {\r",
							"   pm.expect(jsonData.salary).to.eql(4500);\r",
							"})\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var reqInfo_3 = request.data;\r",
							"console.log(reqInfo_3);\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							" pm.test(\"Check req name Montana\", function () {\r",
							"    pm.expect(reqInfo_3.name).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check req age 37\", function () {\r",
							"    pm.expect(reqInfo_3.age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check req salary 4500\", function () {\r",
							"    pm.expect(+reqInfo_3.salary).to.eql(jsonData.salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"pm.test(\"Check u_salary_1_5_year = salary*4\", function () {\r",
							"    pm.expect(reqInfo_3.salary*4).to.eql(jsonData.family.u_salary_1_5_year);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Montana",
							"type": "default"
						},
						{
							"key": "age",
							"value": "37",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "4500",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"var reqObject = pm.request.url.toJSON();\r",
							"console.log(reqObject)\r",
							"console.log(reqObject.query[0].value)\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check req name\", function () {\r",
							"    pm.expect(reqObject.query[0].value).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"Check req age\", function () {\r",
							"    pm.expect(reqObject.query[1].value).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"Check req salary\", function () {\r",
							"    pm.expect(+reqObject.query[2].value).to.eql(jsonData.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Check Dog:name\", function () {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.any.keys('name');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Check Dog:age\", function () {\r",
							"pm.expect(jsonData.family.pets.dog).to.have.any.keys('age');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Check name=Lucky\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Check age=4\", function () {\r",
							"pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Montana&age=37&salary=4500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Montana"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "4500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"let reqObject = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Check name response = name request \", function () {\r",
							"    pm.expect(reqObject.name).to.eql(jsonData.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Check age response = age request \", function () {\r",
							"    pm.expect(+reqObject.age).to.eql(jsonData.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(reqObject.salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(jsonData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check salary[0] response = salary request \", function () {\r",
							"    pm.expect(+reqObject.salary).to.eql(jsonData.salary[0]);\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary[1] response = salary*2 request \", function () {\r",
							"    pm.expect(reqObject.salary*2).to.eql(+jsonData.salary[1]);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Check salary[2] response = salary*3 request \", function () {\r",
							"    pm.expect(reqObject.salary*3).to.eql(+jsonData.salary[2]);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set('name');\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set('age');\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set('salary');\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary[0]);\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary. Вариант проще\r",
							"for (let i of jsonData.salary) {\r",
							"    console.log(\"Salary : \"+i)\r",
							"}\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary. Вариант сложнее\r",
							"for (var i=0; i < jsonData.salary.length; i++ ){\r",
							"    console.log(\"Salary \"+ i +\" : \"+jsonData.salary[i])\r",
							"}\r",
							"\r",
							"console.log(jsonData.name)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Montana&age=37&salary=4500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Montana"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "4500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"  var jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"var reqInfo_2 = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check response : start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.any.keys('start_qa_salary');\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check response : qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.any.keys('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check response : qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.any.keys('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check response : qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.any.keys('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check response : qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.any.keys('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check response : person\", function () {\r",
							"    pm.expect(jsonData).to.have.any.keys('person');\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check start_qa_salary response = salary request \", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+reqInfo_2.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_6_months response = salary*2 request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(+reqInfo_2.salary*2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_12_months response = salary*2.7 request\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(+reqInfo_2.salary*2.7);\r",
							"});\r",
							"\r",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_1.5_year response = salary*3.3 request\", function () {\r",
							"pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(+reqInfo_2.salary*3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test(\"Check qa_salary_after_3.5_year response = salary*3.8 request\", function () {\r",
							"pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(+reqInfo_2.salary*3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Check person.u_name[1] = salary request \", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+reqInfo_2.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Check u_age = age request \", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+reqInfo_2.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test(\"Check u_salary_5_years = salary*4.2 request \", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(+reqInfo_2.salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for (let k = 0; k < 1; k++){\r",
							"console.log(\"u_age : \" + jsonData.person.u_age)   \r",
							" for (let i=0; i < jsonData.person.u_name.length; i++ ){\r",
							" console.log(\"u_name \" + i +\" : \"+jsonData.person.u_name[i])}\r",
							"  for (let t = 0; t < 1; t++){\r",
							"  console.log(\"u_salary_5_years : \" + jsonData.person.u_salary_5_years)}\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}