{
	"info": {
		"_postman_id": "ff1a0c24-83f4-4651-84f6-50eadc1f607a",
		"name": "HW_POSTMAN_3",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Montana",
							"type": "default"
						},
						{
							"key": "password",
							"value": "123",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"console.log(jsonData)\r",
							"\r",
							"var sсhema = {\r",
							"   \"type\": \"object\",\r",
							"   \"properties\": {\r",
							"                 \"person\": {\r",
							"                  \"type\": \"object\",\r",
							"                  \"properties\": { \r",
							"                     \"u_age\": {\r",
							"                     \"type\": \"integer\"\r",
							"                  },\r",
							"                     \"u_name\": {\r",
							"                      \"type\": \"array\",\r",
							"                      \"items\": [\r",
							"                          {\r",
							"                              \"type\": \"string\"\r",
							"                          },\r",
							"                          {\r",
							"                              \"type\": \"integer\"\r",
							"                          },\r",
							"                          {\r",
							"                              \"type\": \"integer\"\r",
							"                          }\r",
							"                        ]\r",
							"                     },\r",
							"                      \"u_salary_1_5_year\": {\r",
							"                          \"type\": \"integer\"\r",
							"                      }\r",
							"                  },\r",
							"                     \"required\": [\r",
							"                         \"u_age\",\r",
							"                         \"u_name\",\r",
							"                         \"u_salary_1_5_year\"\r",
							"                     ]\r",
							"                 },\r",
							"                 \"qa_salary_after_12_months\": {\r",
							"                     \"type\": \"number\"\r",
							"                    \r",
							"                 },\r",
							"                 \"qa_salary_after_6_months\": {\r",
							"                     \"type\": \"integer\"\r",
							"                 },\r",
							"                 \"start_qa_salary\": {\r",
							"                     \"type\": \"integer\"\r",
							"                 }\r",
							"   },\r",
							"    \"required\": [\r",
							"        \"person\",\r",
							"        \"qa_salary_after_12_months\",\r",
							"        \"qa_salary_after_6_months\",\r",
							"        \"start_qa_salary\"\r",
							"    ]\r",
							"}\r",
							"\r",
							"pm.test('Schema Valid', () => {\r",
							"        pm.expect(tv4.validate(jsonData, sсhema)).to.be.true\r",
							"})\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения\r",
							"//  на коэффициент.\r",
							"pm.test(\"Тест по проверке коэфициента *2 верный\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months / jsonData.person.u_name[1]).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Тест по проверке коэфициента *2.9 верный\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months / jsonData.person.u_name[1]).to.eql(2.9);\r",
							"});\r",
							"\r",
							"pm.test(\"Тест по проверке коэфициента *4 верный\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_1_5_year / jsonData.person.u_name[1]).to.eql(4);\r",
							"});\r",
							"console.log(jsonData.person.u_name[1])\r",
							"console.log(jsonData.person.u_salary_1_5_year)\r",
							"\r",
							"// 4) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса \r",
							"// http://162.55.220.72:5005/get_test_user\r",
							"var salary1 = jsonData.person.u_salary_1_5_year\r",
							"pm.environment.set(\"salary1\", salary1);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "auth_token",
						"value": "{{token}}",
						"type": "default"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\"age\":37, \"salary\":4500, \"name\":\"Montana\", \"auth_token\": \"{{token}}\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var env_token = pm.environment.get(\"token\");\r",
							"console.log(env_token)\r",
							"pm.sendRequest({\r",
							"    url: 'http://162.55.220.72:5005/currency',\r",
							"    method: 'POST',\r",
							"    header: {\r",
							"        'Content-Type': 'multipart/form-data',\r",
							"          },\r",
							"      body: {\r",
							"          mode: 'formdata',\r",
							"          formdata: {auth_token: env_token}\r",
							"      }\r",
							"},  function(err, res) {\r",
							"  console.log(res);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "37",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary1}}",
							"type": "default"
						},
						{
							"key": "name",
							"value": "Montana",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "/new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var jsonData = JSON.parse(responseBody);\r",
							"var sсhema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema Valid', () => {\r",
							"        pm.expect(tv4.validate(jsonData, sсhema)).to.be.true\r",
							"})\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения\r",
							"//  на коэффициент.\r",
							"pm.test(\"Тест по проверке коэфициента *2 верный\", function () {\r",
							"    pm.expect(+jsonData.salary[1] / jsonData.salary[0]).to.eql(2);\r",
							"});\r",
							"\r",
							"pm.test(\"Тест по проверке коэфициента *3 верный\", function () {\r",
							"    pm.expect(+jsonData.salary[2] / jsonData.salary[0]).to.eql(3);\r",
							"});\r",
							"\r",
							"// 4) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"var element_0 = jsonData.salary[0]\r",
							"var element_1 = +jsonData.salary[1]\r",
							"var element_2 = +jsonData.salary[2]\r",
							"pm.test(\"2-й элемент массива salary больше 1-го и 0-го\", function () {\r",
							"    pm.expect(element_0  < element_1 < element_2).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "/test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"var sсhema = {\r",
							"   \"type\": \"object\",\r",
							"   \"properties\": {\r",
							"    \"age\":{\r",
							"      \"type\": \"integer\"\r",
							"     },\r",
							"    \"daily_food\": {\r",
							"       \"type\": \"number\"\r",
							"     },\r",
							"    \"daily_sleep\": {\r",
							"       \"type\": \"number\"\r",
							"     },\r",
							"    \"name\": {\r",
							"       \"type\": \"string\"\r",
							"     }},\r",
							"\"required\": [\r",
							"        \"age\",\r",
							"        \"daily_food\",\r",
							"        \"daily_sleep\",\r",
							"        \"name\"\r",
							"]\r",
							"    };\r",
							"\r",
							"pm.test('Schema Valid', () => {\r",
							"        pm.expect(tv4.validate(jsonData, sсhema)).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата\r",
							"//  перемножения на коэффициент.\r",
							"var request_Data = request.data;\r",
							"console.log(request_Data)\r",
							"pm.test(\"Тест по проверке коэфициента умножения для daily_food верный\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.daily_food / +request_Data.weight).to.eql(0.012);\r",
							"});\r",
							"\r",
							"pm.test(\"Тест по проверке коэфициента умножения для daily_sleep верный\", function () {\r",
							"    \r",
							"    pm.expect(jsonData.daily_sleep / +request_Data.weight).to.eql(2.5);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "weight",
							"value": "68",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "/get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"var schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"family\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"children\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"array\",\r",
							"              \"items\": [\r",
							"                {\r",
							"                  \"type\": \"string\"\r",
							"                },\r",
							"                {\r",
							"                  \"type\": \"integer\"\r",
							"                }\r",
							"              ]\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"children\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"family\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema Valid', () => {\r",
							"        // pm.expect(tv4.validate(jsonData, sсhema)).to.be.true;\r",
							"        const result = tv4.validateMultiple(jsonData, schema);\r",
							"  \r",
							"  if(!result.valid) result.errors.forEach(error => \r",
							"  console.log(`Validation error: ${error.message}. Path: ${error.schemaPath}`));\r",
							"  \r",
							"  pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"// 3) Проверить что значение поля name = значению переменной name из окружения\r",
							"var request_Data = request.data;\r",
							"var env_name = pm.environment.get(\"name\");\r",
							"\r",
							"pm.test(\"занчение поля name = значению переменной name из окружения\", function () {\r",
							"    pm.expect(request_Data.name).to.eql(env_name);\r",
							"});\r",
							"\r",
							"// 4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age \r",
							"pm.test(\"занчение поля age response = age request\", function () {\r",
							"    pm.expect(request_Data.name).to.eql(jsonData.name);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/get_test_user",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "/currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var request_Data = request.data;\r",
							"console.log(request_Data)\r",
							"\r",
							"// 1) Можете взять любой объект из присланного списка, используйте js random.\r",
							"// В объекте возьмите Cur_ID и передать через окружение в следующий запрос.\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"let randomNumb = _.random(0, 329);\r",
							"console.log(jsonData[randomNumb].Cur_ID)\r",
							"console.log(randomNumb)\r",
							"\r",
							"pm.environment.set(\"Cur_ID\", jsonData[randomNumb].Cur_ID);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/currency",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "/curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 2) Проверка структуры json в ответе.\r",
							"var jsonData = pm.response.json();\r",
							"console.log(jsonData)\r",
							"\r",
							"let schema = {\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"Cur_Abbreviation\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_ID\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Cur_Name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"Cur_OfficialRate\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"Cur_Scale\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"Date\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"Cur_Abbreviation\",\r",
							"    \"Cur_ID\",\r",
							"    \"Cur_Name\",\r",
							"    \"Cur_OfficialRate\",\r",
							"    \"Cur_Scale\",\r",
							"    \"Date\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test('Schema Valid', () => {\r",
							"  const result = tv4.validateMultiple(jsonData, schema);\r",
							"  \r",
							"  if(!result.valid) result.errors.forEach(error => \r",
							"  console.log(`Validation error: ${error.message}. Path: ${error.schemaPath}`));\r",
							"  \r",
							"  pm.expect(result.valid).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "default"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/curr_byn",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		}
	]
}